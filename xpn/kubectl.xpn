# kubectl has 1 subcommand as standard
kubectl  ? cmd+1

# global settings.  
# prevent arguments of native global option from being treated as commands
# without these settings:  kc -n c c  >>>  kc -n create c
# with settings: kc -n c c  >>>  kc -n c create
# declare the option and additional arg as native (no expansion)
kubectl:-n           ? native+1
kubectl:--namespace  ? native+1
kubectl:-s           ? native+1
kubectl:--server     ? native+1
kubectl:-v           ? native+1
kubectl:--v          ? native+1

# normal behavior when reaching last sub command is no more args are expanded
# however, for these, allow one arg to expand (a resource)
# kc get d -> kc get deploy
kubectl>create       ? arg=1
kubectl>describe     ? arg=1
kubectl>get          ? arg=1

# kubectl set to only one subcommand, enable config explicitly for another
kubectl>config       ? cmd+1

# treated as global even though they are not.
# this is an invalid command:  kc -all gp > kc --all-namespaces get po  
# this is:  kc gp -all > kc get po --all-namespaces  
kubectl:-f           ? native+1
kubectl:--filename   ? native+1
kubectl:--fs         | --field-selector=
kubectl:--nks        -n=kube-system
kubectl:--ojp        | -o=jsonpath=
kubectl:--ow         -o=wide
kubectl:--oy         -o=yaml
kubectl:--sl         --show-labels

#
# Expansions
#

# command and resource
kubectl>a       apply
kubectl>af      apply -f
kubectl>ak      apply -k
kubectl>all     get all
kubectl>c       create
kubectl>cc      config current-context
kubectl>cf      create -f
kubectl>cfg     config
kubectl>cj      get cj
kubectl>cm      get cm
kubectl>cm      get cm
kubectl>crd     get crd
kubectl>cs      get cs
kubectl>csr     get csr
kubectl>d       delete
kubectl>dep     get dep
kubectl>deploy  get deploy
kubectl>des     describe
kubectl>df      delete -f
kubectl>dk      delete -k
kubectl>ds      get ds
kubectl>ep      get ep
kubectl>ev      get ev
kubectl>g       get
kubectl>hpa     get hpa
kubectl>ing     get ing
kubectl>l       logs
kubectl>limits  limits
kubectl>netpol  get netpol
kubectl>no      get no
kubectl>ns      get ns
kubectl>pc      get pc
kubectl>pdb     get pdb
kubectl>pf      port-forward
kubectl>po      get po
kubectl>psp     get psp
kubectl>pv      get pv
kubectl>pvc     get pvc
kubectl>quota   get quota
kubectl>r       replace
kubectl>rc      get rc
kubectl>rf      replace -f
kubectl>rs      get rs
kubectl>sa      get sa
kubectl>sc      get sc
kubectl>sec     get secret
kubectl>sts     get sts
kubectl>svc     get svc

# macros
kubectl>bash    exec --stdin --tty --bash
kubectl>debug   run debug --rm -i -t --image=busybox --restart=Never
kubectl>gcns    config v --minify --output jsonpath={..namespace}
kubectl>image   | run debug --rm -i -t --restart=Never --command=true --image=
kubectl>sh      exec --stdin --tty --sh
kubectl>sns     config set-context --current --namespace

kubectl>config>gc    get-contexts
kubectl>config>cc    current-context
kubectl>config>uc    use-context
kubectl>config>sco   set-context
kubectl>config>v     view
kubectl>config>scr   set-credentials

kubectl>config>set-credentials>-p  | --password=
kubectl>config>set-credentials>-u  | --username=

kubectl>create>dep  deployment

kubectl>exec>--bash  * -- /bin/bash
kubectl>exec>--sh    * -- /bin/sh

kubectl>explain>dep  deployment

kubectl>get>-s   --sort-by=.metadata.name
kubectl>get>-y   -o=yaml
kubectl>get>dep  deployment
